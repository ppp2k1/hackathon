type Query {
    SecurityConfigByVm(name: String): SecurityConfig
}

type SecurityConfig {
    name: String!
    vmware: VmWare
    ontap: Ontap
}

type VmWare {
    id: Long!
    ipAddress: String!
    vmName: String!
    host: Host
    datastore: Datastore
    vmdk: [Vmdk]
}

type Host {
    ipAdd: String!
    firewallOn: String!
    firewallLoaded: String!
    firewallDefaultAction: String!
}

type Datastore {
    type: String!
    name: String!
    url: String!
    remoteHost: String!
    remotePath: String!
}

type Vmdk {
    vmdkName: String!
    vmdkFilePath: String!
    datastoreName: String!
}

type Ontap {
    ip: String!
    volume: Volume
    vserver: Vserver
    cluster: Cluster
}

type Volume {
    softwareEncrypt: Boolean
    hardwareEncrypt: Boolean
    volumeAntivirusAttributes: AntivirusAttributes
    volumeExportAttributes: ExportAttributes
    volumeSecurityAttributes: SecurityAttributes
    volumeIdAttributes: IdAttributes
}

type AntivirusAttributes {
    onAccessPolicy: String!
}

type ExportAttributes {
    policy: String!
}

type SecurityAttributes {
    style: String!
    volumeSecurityUnixAttributes: SecurityUnixAttributes
}

type SecurityUnixAttributes {
    groupId: String!
    permissions: Long
    userId: String!
}

type IdAttributes{
    uuid: String!
    name: String!
    node: String!
    junctionPath: String!
    type: String!
    style: String!
    styleExtended: String!
    containingAggregateName: String!
    containingAggregateUuid: String!
    owningVserverName: String!
    aggrList: [String]
}

type Vserver {
    loginBannerConfigured: Boolean
    sshCiphersSecured: Boolean
    cifsLdapSigned: Boolean
    CifsLdapSealed: Boolean
    nfsKerberoseEnabled: Boolean
    iscsiChapEnabled: Boolean
}

type Cluster {
    telnetEnabled: Boolean
    sshCiphersSecured: Boolean
    asupHttpsConfigured: Boolean
    fipsEnabled: Boolean
    loginBannerConfigured: Boolean
}